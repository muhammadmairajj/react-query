import { useQuery, useMutation, QueryClient } from "@tanstack/react-query";
import "./App.css";

const postData = [
  { id: 1, title: "Post 1" },
  { id: 2, title: "Post 2" },
  { id: 3, title: "Post 3" },
];

function App() {
  console.log(postData);
  
  const queryClient = new QueryClient();

  const postQuery = useQuery({
    queryKey: ["posts"],
    queryFn: (obj) => wait(1000).then(() => {
      console.log("obj", obj);
      return [...postData]
    }),
    // queryFn: () => wait(1000).then(() => [...postData]),
  });
  const newPostMutation = useMutation({
    mutationFn: (title) => {
      wait(1000).then(() => postData.push({ id: crypto.randomUUID(), title }));
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["posts"]);
    },
  });

  if (postQuery.isLoading) return <h1>isLoading...</h1>;
  if (postQuery.isError) return <pre>{JSON.stringify(postQuery.error)}</pre>;
  return (
    <>
      <h1>TanStack Query</h1>
      <ul>
        {postQuery.data.map((val) => {
          return <li key={val.id}>{val.title}</li>;
        })}
      </ul>
      <button
        disabled={newPostMutation.isLoading}
        onClick={() => newPostMutation.mutate("Post 5")}
      >
        Add New Post
      </button>
    </>
  );
}

function wait(duration) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}

export default App;
